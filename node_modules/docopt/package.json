{
  "_args": [
    [
      {
        "raw": "docopt@^0.6.2",
        "scope": null,
        "escapedName": "docopt",
        "name": "docopt",
        "rawSpec": "^0.6.2",
        "spec": ">=0.6.2 <0.7.0",
        "type": "range"
      },
      "C:\\Users\\vb62290\\Documents\\toh-pt4\\node_modules\\source-map-explorer"
    ]
  ],
  "_from": "docopt@>=0.6.2 <0.7.0",
  "_id": "docopt@0.6.2",
  "_inCache": true,
  "_location": "/docopt",
  "_nodeVersion": "0.12.2",
  "_npmUser": {
    "name": "stuartcarnie",
    "email": "stuart.carnie@gmail.com"
  },
  "_npmVersion": "2.7.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "docopt@^0.6.2",
    "scope": null,
    "escapedName": "docopt",
    "name": "docopt",
    "rawSpec": "^0.6.2",
    "spec": ">=0.6.2 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/source-map-explorer"
  ],
  "_resolved": "https://registry.npmjs.org/docopt/-/docopt-0.6.2.tgz",
  "_shasum": "b28e9e2220da5ec49f7ea5bb24a47787405eeb11",
  "_shrinkwrap": null,
  "_spec": "docopt@^0.6.2",
  "_where": "C:\\Users\\vb62290\\Documents\\toh-pt4\\node_modules\\source-map-explorer",
  "author": {
    "name": "Vladimir Keleshev",
    "email": "vladimir@keleshev.com"
  },
  "bugs": {
    "url": "https://github.com/scarnie/docopt.coffee/issues"
  },
  "contributors": [
    {
      "name": "Andrew Kassen",
      "email": "atkassen@berkeley.edu"
    },
    {
      "name": "Vladimir Keleshev",
      "email": "vladimir@keleshev.com"
    },
    {
      "name": "Stuart Carnie",
      "email": "stuart.carnie@gmail.com"
    },
    {
      "name": "Matthias Rolke",
      "email": "mr.amtrack@gmail.com"
    }
  ],
  "dependencies": {},
  "description": "a command line option parser that will make you smile",
  "devDependencies": {
    "chai": "^2.2.0",
    "coffee-script": "^1.9.1",
    "coffeelint": "^1.9.2",
    "mocha": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "b28e9e2220da5ec49f7ea5bb24a47787405eeb11",
    "tarball": "https://registry.npmjs.org/docopt/-/docopt-0.6.2.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "198e5c72baff8a6e10832c677eba67dc29068792",
  "homepage": "https://github.com/scarnie/docopt.coffee#readme",
  "keywords": [
    "command",
    "options",
    "argument",
    "args",
    "cli",
    "commandline"
  ],
  "licenses": "MIT",
  "main": "docopt.js",
  "maintainers": [
    {
      "name": "stuartcarnie",
      "email": "stuart.carnie@gmail.com"
    }
  ],
  "name": "docopt",
  "optionalDependencies": {},
  "readme": "`docopt` â€“ a command line option parser that will make you smile [![Build Status](https://travis-ci.org/stuartcarnie/docopt.coffee.svg)](https://travis-ci.org/stuartcarnie/docopt.coffee)\n===============================================================\n\n> [docopt](http://docopt.org) is a language for description of command-line\n> interfaces. This is `docopt` implementation in CoffeeScript, that could\n> be used for server-side CoffeeScript and JavaScript programs.\n\nIsn't it awesome how modern command-line arguments parsers generate\nhelp message based on your code?!\n\n**Hell no!**  You know what's awesome?  When the option parser *is* generated\nbased on the help message that you write yourself!  This way you don't need to \nwrite this stupid repeatable parser-code, and instead can write a beautiful \nhelp message (the way you want it!), which adds readability to your code.\n\nNow you can write an awesome, readable, clean, DRY code like *this*:\n\n```coffeescript\ndoc = \"\"\"\nUsage:\n  quick_example.coffee tcp <host> <port> [--timeout=<seconds>]\n  quick_example.coffee serial <port> [--baud=9600] [--timeout=<seconds>]\n  quick_example.coffee -h | --help | --version\n\n\"\"\"\n{docopt} = require '../docopt'\n\nconsole.log docopt(doc, version: '0.1.1rc')\n```\n\nHell yeah! The option parser is generated based on `doc` string above, that you\npass to the `docopt` function.\n\n\n\nAPI `{docopt} = require 'docopt'`\n---------------------------------\n\n### `options = docopt(doc, {argv: process.argv[2..], help: true, version: null, options_first: false, exit: true})`\n\n`docopt` takes 1 required argument, and 3 optional keyword arguments:\n\n* `doc` (required) should be a string with the help message, written according \nto rules of the [docopt language](http://docopt.org). Here's a quick example:\n\n  ```bash\n  Usage: your_program [options]\n\n    -h --help     Show this.\n    -v --verbose  Print more text.\n    --quiet       Print less text.\n    -o FILE       Specify output file [default: ./test.txt].\n  ```\n\n* `argv` is an optional argument vector. It defaults to the arguments passed\nto your program (`process.argv[2..]`). You can also supply it with an array\nof strings, as with `process.argv`. For example: `['--verbose', '-o', 'hai.txt']`.\n\n* `help` (default:`true`) specifies whether the parser should automatically\nprint the help message (supplied as `doc`) in case `-h` or `--help` options\nare encountered. After showing the usage-message, the program will terminate.\nIf you want to handle `-h` or `--help` options manually (the same as other options),\nset `help=false`.\n\n* `version` (default:`null`) is an optional argument that specifies the\nversion of your program. If supplied, then, if the parser encounters\n`--version` option, it will print the supplied version and terminate.\n`version` could be any printable object, but most likely a string,\ne.g. `'2.1.0rc1'`.\n\n* `options_first`, by default `false`.  If set to `true` will\ndisallow mixing options and positional argument.  I.e. after first\npositional argument, all arguments will be interpreted as positional\neven if the look like options.  This can be used for strict\ncompatibility with POSIX, or if you want to dispatch your arguments\nto other programs.\n\n* `exit`, by default `true`.  If set to `false` will\ncause docopt to throw exceptions instead of printing the error to console and terminating the application.\nThis flag is mainly for testing purposes.\n\n**Note:** Although `docopt` automatically handles `-h`, `--help` and `--version` options,\nyou still need to mention them in the options description (`doc`) for your users to\nknow about them.\n\nThe **return** value is an `Object` with properties (giving long options precedence), \nlike this:\n\n```javascript\n{'--timeout': '10',\n '--baud': '4800',\n '--version': false,\n '--help': false,\n '-h': false,\n serial: true,\n tcp: false,\n '<host>': false,\n '<port>': '/dev/ttyr01'}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/scarnie/docopt.coffee.git"
  },
  "scripts": {
    "lint": "coffeelint docopt.coffee test/*.coffee",
    "prepublish": "coffee -c docopt.coffee",
    "test": "mocha --compilers coffee:coffee-script/register"
  },
  "version": "0.6.2"
}
